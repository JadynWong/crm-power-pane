name: '1.1.0.$(build.buildId)'

trigger:
  - master

variables:
  artifactsDirectory: '$(Pipeline.Workspace)/artifacts'

stages:
- stage: 'build'
  displayName: 'Build'
  jobs:
  - job: 'build_job'
    displayName: 'Build'
    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:
    - checkout: self
      clean: true
      
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    - script: |
        npm install --only=dev
        npm install
        npm run build-all -- --build-version=$(build.buildNumber)
      displayName: 'npm install and run all build scripts'
    - script: |
        echo "Tagging Build: ${BUILD_NUMBER}"
        git tag ${BUILD_NUMBER}
        git push origin ${BUILD_NUMBER}
      displayName: 'Tag the build'
      env:
        BUILD_NUMBER: $(build.buildNumber)
    - task: ArchiveFiles@2
      displayName: 'Archive chrome extension'
      inputs:
        rootFolderOrFile: '$(build.sourcesDirectory)/dist/chrome' 
        includeRootFolder: false 
        archiveFile: '$(build.artifactStagingDirectory)/$(build.buildNumber).chrome.zip'
    - publish: '$(build.artifactStagingDirectory)/$(build.buildNumber).chrome.zip'
      displayName: 'Publish chrome artifacts'
      artifact: '$(build.buildNumber).chrome.zip'
    - task: ArchiveFiles@2
      displayName: 'Archive firefox extension'
      inputs:
        rootFolderOrFile: '$(build.sourcesDirectory)/dist/firefox' 
        includeRootFolder: false 
        archiveFile: '$(build.artifactStagingDirectory)/$(build.buildNumber).firefox.zip'
    - publish: '$(build.artifactStagingDirectory)/$(build.buildNumber).firefox.zip'
      displayName: 'Publish firefox artifacts'
      artifact: '$(build.buildNumber).firefox.zip'
    - task: ArchiveFiles@2
      displayName: 'Archive edge extension'
      inputs:
        rootFolderOrFile: '$(build.sourcesDirectory)/dist/edge' 
        includeRootFolder: false 
        archiveFile: '$(build.artifactStagingDirectory)/$(build.buildNumber).edge.zip'
    - publish: '$(build.artifactStagingDirectory)/$(build.buildNumber).edge.zip'
      displayName: 'Publish edge artifacts'
      artifact: '$(build.buildNumber).edge.zip'
- stage: 'release_github'
  displayName: 'Release to GitHub'
  jobs:
  - deployment: 'release_github_job'
    displayName: 'Release to GitHub'
    environment: 'GitHub (pre-release)'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: mkdir $(artifactsDirectory)
            displayName: 'Create $(artifactsDirectory) directory'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download all artifacts'
            inputs:
              targetPath: '$(artifactsDirectory)'
          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'azure-pipelines-github-release'
              repositoryName: '$(build.repository.name)'
              action: 'create'
              target: '$(build.sourceVersion)'
              tagSource: 'gitTag'
              assets: '$(artifactsDirectory)/*.zip'
              isPreRelease: true
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'
- stage: 'release_chrome_draft'
  displayName: 'Release to Chrome Web Store (Draft)'
  jobs:
  - deployment: 'release_chrome_draft_job'
    displayName: 'Release to Chrome Web Store (Draft)'
    environment: 'Chrome Web Store (Draft)'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: mkdir $(artifactsDirectory)
            displayName: 'Create $(artifactsDirectory) directory'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download $(build.buildNumber).chrome.zip'
            inputs:
              artifact: '$(build.buildNumber).chrome.zip'
              targetPath: '$(artifactsDirectory)'
          - script: |
              echo "Obtaining an access token..."
              ACCESS_TOKEN=$(curl "https://accounts.google.com/o/oauth2/token" -d "client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&code=${CODE}&grant_type=authorization_code&redirect_uri=urn:ietf:wg:oauth:2.0:oob" | jq -r .access_token)
              echo "Uploading $(artifactsDirectory)/$(build.buildNumber).chrome.zip..."
              UPLOAD_RESPONSE=$(curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -X PUT -T "$(artifactsDirectory)/$(build.buildNumber).chrome.zip" -v "https://www.googleapis.com/upload/chromewebstore/v1.1/items/${APP_ID}")
              UPLOAD_STATE=$(echo ${UPLOAD_RESPONSE} | jq -r .uploadState)
              if [ ${UPLOAD_STATE} != "FAILURE" ];
              then
                echo "Publishing to trusted testers..."
                curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "x-goog-api-version: 2" -H "Content-Length: 0" -H "publishTarget: trustedTesters" -X POST -v "https://www.googleapis.com/chromewebstore/v1.1/items/${APP_ID}/publish"
              else
                echo "Extension upload failed with response ${UPLOAD_RESPONSE}"
                exit 1
              fi
            env:
              APP_ID: $(Chrome.WebStore.ExtensionId)
              CLIENT_ID: $(Chrome.WebStore.ClientId)
              CLIENT_SECRET: $(Chrome.WebStore.ClientSecret)
              CODE: $(Chrome.WebStore.Code)
            displayName: 'Publish to Chrome web store'

# TODO: Add parallel draft release stages for firefox and edge (?)